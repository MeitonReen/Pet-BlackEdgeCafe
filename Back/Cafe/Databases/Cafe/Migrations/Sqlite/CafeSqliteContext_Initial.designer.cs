// <auto-generated />
using System;
using Cafe.Databases.Cafe.Context.Implementations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Cafe.Databases.Cafe.Migrations.Sqlite
{
    [DbContext(typeof(CafeSqliteContext))]
    [Migration("20210907162016_CafeSqliteContext_Initial")]
    partial class CafeSqliteContext_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInCart", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CartId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.HasKey("PromocodeId", "CartId")
                        .HasName("PK_AppliedPromocodesInCarts_PromocodeIdCartId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("AppliedPromocodesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInOrder", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.HasKey("PromocodeId", "OrderId")
                        .HasName("PK_AppliedPromocodesInOrders_PromocodeIdOrderId");

                    b.HasIndex("OrderId", "ClientId");

                    b.ToTable("AppliedPromocodesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.BookedTable", b =>
                {
                    b.Property<Guid>("BookedTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeATableIsWillBeFree")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("BookedTableId")
                        .HasName("PK_BookedTables_BookedTableId");

                    b.HasIndex("TableId");

                    b.ToTable("BookedTables");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("AmountIncludingValidAppliedPromocodes")
                        .HasColumnType("REAL")
                        .HasColumnName("AmountIncluding_Valid_Applied_Promocodes");

                    b.Property<string>("CookingStatus")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("BLOB");

                    b.Property<int>("SqliteVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("CartId", "ClientId")
                        .HasName("PK_Carts_CartIdClientId");

                    b.HasIndex("TableId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.CartsLinkedDish", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CartId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DishId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("CostIncludingValidAppliedPromocodes")
                        .HasColumnType("REAL")
                        .HasColumnName("CostIncluding_Valid_Applied_Promocodes");

                    b.HasKey("ClientId", "CartId", "DishId")
                        .HasName("PK_CartsLinkedDishes_CartIdClientIdDishId");

                    b.HasIndex("DishId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("CartsLinkedDishes");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Calorie")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("DishId")
                        .HasName("PK_Dishes_DishId");

                    b.HasIndex(new[] { "Name" }, "AK_Dishes_Name")
                        .IsUnique();

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("c828dc04-a100-4f1b-7f98-08d9721b6049"),
                            Calorie = 500,
                            Cost = 255,
                            Description = "Мясная тарелка – это калейдоскоп деликатесов, изящно дополненный овощами и соусом от шеф-повара. Каждая тарелка грамотно создаётся нашим шеф-поваром в рамках вкусовой палитры. Мясная тарелка станет прекрасным дополнением к крепкому алкоголю – коньяку, бренди или виски, а также сухому красному вину",
                            Name = "Мясная тарелка",
                            Weight = 240
                        },
                        new
                        {
                            DishId = new Guid("608f017c-d7b8-4237-7f99-08d9721b6049"),
                            Calorie = 500,
                            Cost = 880,
                            Description = "Греческий салат – легкое, вкусное и исключительно полезное блюдо. Сочный помидор, хрустящий огурец, нарезанный красный лук, сладкий перец, рассыпчатый сыр «Фета», пухлые маслины и оливковое масло",
                            Name = "Греческий салат",
                            Weight = 280
                        },
                        new
                        {
                            DishId = new Guid("dab47268-f6bf-4e4f-7f9a-08d9721b6049"),
                            Calorie = 600,
                            Cost = 500,
                            Description = "Благодаря маринаду на базе 9 специй стейк получается очень пикантный, мягкий и сочный. Подаётся с соусом от шеф-повара и овощами",
                            Name = "Свиной стейк",
                            Weight = 350
                        },
                        new
                        {
                            DishId = new Guid("035bf9b2-046d-400b-7f9b-08d9721b6049"),
                            Calorie = 500,
                            Cost = 500,
                            Description = "Благодаря маринаду на базе 9 специй стейк получается очень пикантный, мягкий и сочный. Подаётся с соусом от шеф-повара и овощами",
                            Name = "Говяжий стейк",
                            Weight = 350
                        },
                        new
                        {
                            DishId = new Guid("21ef72f6-8452-4b71-7f9c-08d9721b6049"),
                            Calorie = 500,
                            Cost = 400,
                            Description = "Многокомпонентный красный суп с наваристым вкусом. Мы готовим борщ на мясе телятины и говядины чтобы избежать большого содержания в блюде холестерина, по мере готовности добавляем свёклу, томат, картофель, лук, морковь. В качестве дополнительных ингредиентов мы добавляем сладкий перец и грибы",
                            Name = "Борщец",
                            Weight = 400
                        },
                        new
                        {
                            DishId = new Guid("613c4221-7af7-4609-7f9d-08d9721b6049"),
                            Calorie = 450,
                            Cost = 350,
                            Description = "Тартар из лосося это блюдо французской кухни. Основой рецепта является тартар из говядины, но вместо мяса используется лосось. Свежий или малосольный лосось маринуется вместе с луком и специями, и подается порционно на тарелке вместе с авокадо и гренками",
                            Name = "Тартар из лосося",
                            Weight = 250
                        },
                        new
                        {
                            DishId = new Guid("4f244538-79ff-4241-7f9e-08d9721b6049"),
                            Calorie = 480,
                            Cost = 350,
                            Description = "Салат Цезарь — одно из самых популярных и востребованных блюд, на протяжении более чем сотни лет это бессменная классика европейской кухни. За долгие годы этот салат набрал десятки интересных вариаций состава и подачи, в нашем кафе его подают с креветками",
                            Name = "Цезарь с креветками",
                            Weight = 300
                        },
                        new
                        {
                            DishId = new Guid("172d110a-1195-4e30-7f9f-08d9721b6049"),
                            Calorie = 320,
                            Cost = 350,
                            Description = "Лимонный сок – 5 мл, сахарный сироп – 5 мл, ликер мараскино – 15 мл, ликер трипл сек – 15 мл, коньяк – 50 мл, ангостуру биттер – 1 дэш, апельсиновый биттер – 1 дэш, лимонная цедра, сахарная окаемка",
                            Name = "Бренди круста",
                            Weight = 300
                        },
                        new
                        {
                            DishId = new Guid("b34a9e55-2d86-4875-7fa0-08d9721b6049"),
                            Calorie = 480,
                            Cost = 345,
                            Description = "Водка – 120 мл, грейпфрутовый сок – 220 мл, гренадин – 15 мл",
                            Name = "Алёша",
                            Weight = 320
                        },
                        new
                        {
                            DishId = new Guid("45be7b65-2794-403d-7fa1-08d9721b6049"),
                            Calorie = 440,
                            Cost = 370,
                            Description = "Белый ром – 50 мл, клубничный сироп – 15 мл, содовая – 100 мл, лайм – 60 г, клубника – 120 г, мята – 3 г",
                            Name = "Клубничный мохито",
                            Weight = 370
                        },
                        new
                        {
                            DishId = new Guid("a6acf138-f250-44d0-7fa2-08d9721b6049"),
                            Calorie = 400,
                            Cost = 340,
                            Description = "Белый ром – 30 мл, Блю Кюросао – 20 мл, кокосовое молоко – 50 мл, водка – 30 мл, огурец, ломтики персика",
                            Name = "Скай мохито",
                            Weight = 330
                        },
                        new
                        {
                            DishId = new Guid("6ad4b3ce-2d3b-4741-7fa3-08d9721b6049"),
                            Calorie = 400,
                            Cost = 340,
                            Description = "Кофейный ликёр – 1 часть, айриш крем – 1 часть, светлый ром – 1 часть",
                            Name = "Б-51",
                            Weight = 120
                        },
                        new
                        {
                            DishId = new Guid("08476b46-5546-41a0-7fa4-08d9721b6049"),
                            Calorie = 200,
                            Cost = 120,
                            Description = "Водка — 25 мл, гренадин – 25 мл, красный острый соус \"Табаско\" – 5 мл",
                            Name = "Боярский",
                            Weight = 55
                        },
                        new
                        {
                            DishId = new Guid("a4d5cc1f-c92f-4105-7fa5-08d9721b6049"),
                            Calorie = 270,
                            Cost = 250,
                            Description = "Ликер мятный зеленый – 15 мл, ликер сливочный Бейлис – 15 мл, бренди – 15 мл",
                            Name = "Ирландский флаг",
                            Weight = 45
                        },
                        new
                        {
                            DishId = new Guid("f42ce5c7-ea9a-45a5-7fa6-08d9721b6049"),
                            Calorie = 280,
                            Cost = 270,
                            Description = "Водка – 45 мл, томатный сок – 90 мл, лимонный сок – 15 мл, вустерский соус – 2-3 капли, табаско – щепотка – 2-3 капли, смесь соли c порошком сельдерея – 1 щепотка, чёрный перец – 1 щепотка",
                            Name = "Кровавая мэри",
                            Weight = 155
                        },
                        new
                        {
                            DishId = new Guid("c2c519e8-9258-453d-7fa7-08d9721b6049"),
                            Calorie = 190,
                            Cost = 220,
                            Description = "Яблочный ликёр – 20 мл, лимонный сок – 15 мл, шотландский виски – 20 мл",
                            Name = "Яблочный сауэр",
                            Weight = 55
                        },
                        new
                        {
                            DishId = new Guid("a338d18a-01a2-4427-7fa8-08d9721b6049"),
                            Calorie = 260,
                            Cost = 290,
                            Description = "Ром — 30 мл, водка — 30 мл, трипл сек — 15 мл, ананасовый сок — 30 мл, фреш лайма — 20 мл, сахарный сироп — 15 мл, долька ананаса",
                            Name = "Джангл Джус",
                            Weight = 140
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId")
                        .HasName("PK_DishCategories_CategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_DishCategories_Name")
                        .IsUnique();

                    b.ToTable("DishCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("fe86c0c4-5c54-48e9-7fa9-08d9721b6049"),
                            Name = "Салаты"
                        },
                        new
                        {
                            CategoryId = new Guid("9d9f9b5a-7ccb-4f17-7faa-08d9721b6049"),
                            Name = "Супы"
                        },
                        new
                        {
                            CategoryId = new Guid("625db075-f113-4487-7fab-08d9721b6049"),
                            Name = "Жаркое"
                        },
                        new
                        {
                            CategoryId = new Guid("31c65a6d-8cd6-40fd-7fac-08d9721b6049"),
                            Name = "Рыба"
                        },
                        new
                        {
                            CategoryId = new Guid("7d02e0a8-05fb-4fdf-7fad-08d9721b6049"),
                            Name = "Закуски"
                        },
                        new
                        {
                            CategoryId = new Guid("ebb4cebc-0f51-4587-7fae-08d9721b6049"),
                            Name = "Лонги"
                        },
                        new
                        {
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049"),
                            Name = "Шоты"
                        },
                        new
                        {
                            CategoryId = new Guid("58b484db-a2fe-4391-7fb0-08d9721b6049"),
                            Name = "Безалкогольные"
                        },
                        new
                        {
                            CategoryId = new Guid("faf45d13-629c-4fde-7fb1-08d9721b6049"),
                            Name = "Основное меню"
                        },
                        new
                        {
                            CategoryId = new Guid("ca7ae39d-1628-4e54-7fb2-08d9721b6049"),
                            Name = "Напитки"
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesByCategory", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("DishId", "CategoryId")
                        .HasName("PK_DishesByCaregories_DishIdCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("DishesByCategories");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("c828dc04-a100-4f1b-7f98-08d9721b6049"),
                            CategoryId = new Guid("7d02e0a8-05fb-4fdf-7fad-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("608f017c-d7b8-4237-7f99-08d9721b6049"),
                            CategoryId = new Guid("fe86c0c4-5c54-48e9-7fa9-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("dab47268-f6bf-4e4f-7f9a-08d9721b6049"),
                            CategoryId = new Guid("625db075-f113-4487-7fab-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("035bf9b2-046d-400b-7f9b-08d9721b6049"),
                            CategoryId = new Guid("625db075-f113-4487-7fab-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("21ef72f6-8452-4b71-7f9c-08d9721b6049"),
                            CategoryId = new Guid("9d9f9b5a-7ccb-4f17-7faa-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("613c4221-7af7-4609-7f9d-08d9721b6049"),
                            CategoryId = new Guid("7d02e0a8-05fb-4fdf-7fad-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("4f244538-79ff-4241-7f9e-08d9721b6049"),
                            CategoryId = new Guid("fe86c0c4-5c54-48e9-7fa9-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("172d110a-1195-4e30-7f9f-08d9721b6049"),
                            CategoryId = new Guid("ebb4cebc-0f51-4587-7fae-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("b34a9e55-2d86-4875-7fa0-08d9721b6049"),
                            CategoryId = new Guid("ebb4cebc-0f51-4587-7fae-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("a6acf138-f250-44d0-7fa2-08d9721b6049"),
                            CategoryId = new Guid("ebb4cebc-0f51-4587-7fae-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("6ad4b3ce-2d3b-4741-7fa3-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("08476b46-5546-41a0-7fa4-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("a4d5cc1f-c92f-4105-7fa5-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("f42ce5c7-ea9a-45a5-7fa6-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("c2c519e8-9258-453d-7fa7-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            DishId = new Guid("a338d18a-01a2-4427-7fa8-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInCart", b =>
                {
                    b.Property<Guid>("DishesInCartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CartId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("CostIncludingValidAppliedPromocodes")
                        .HasColumnType("REAL")
                        .HasColumnName("CostIncluding_Valid_Applied_Promocodes");

                    b.Property<Guid>("DishId")
                        .HasColumnType("TEXT");

                    b.HasKey("DishesInCartsId")
                        .HasName("PK_DishesInCarts_DishesInCartsId");

                    b.HasIndex("DishId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("DishesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInOrder", b =>
                {
                    b.Property<Guid>("DishesInOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<float?>("CostIncludingAppliedPromocodes")
                        .HasColumnType("REAL")
                        .HasColumnName("CostIncluding_Applied_Promocodes");

                    b.Property<Guid>("DishId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("DishesInOrderId")
                        .HasName("PK_DishesInOrders_DishesInOrderId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId", "ClientId");

                    b.ToTable("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("AmountIncludingAppliedPromocodes")
                        .HasColumnType("REAL")
                        .HasColumnName("AmountIncluding_Applied_Promocodes");

                    b.Property<string>("CookingStatus")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeIsCompleted")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ClientId")
                        .HasName("PK_Orders_OrderIdClientId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Promocode", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("CoefficientDiscount")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PromocodeText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("PromocodeId")
                        .HasName("PK_Promocodes_PromocodeId");

                    b.HasIndex(new[] { "PromocodeText" }, "AK_Promocodes_PromocodeText")
                        .IsUnique();

                    b.ToTable("Promocodes");

                    b.HasData(
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CoefficientDiscount = 0.1f,
                            IsValid = false,
                            PromocodeText = "BlackEdge_SpringPromotion_10%"
                        },
                        new
                        {
                            PromocodeId = new Guid("7d6397d4-38be-440a-7fce-08d9721b6049"),
                            CoefficientDiscount = 0.07f,
                            IsValid = false,
                            PromocodeText = "HAPPY_WINTER_7%"
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.PromocodesForDishCategory", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("PromocodeId", "CategoryId")
                        .HasName("PK_PromocodesForDishCategories_PromocodeIdDishCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PromocodesForDishCategories");

                    b.HasData(
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("fe86c0c4-5c54-48e9-7fa9-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("ebb4cebc-0f51-4587-7fae-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("9d9f9b5a-7ccb-4f17-7faa-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("625db075-f113-4487-7fab-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("31c65a6d-8cd6-40fd-7fac-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("7d02e0a8-05fb-4fdf-7fad-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("4bec85a6-4093-43e7-7fcd-08d9721b6049"),
                            CategoryId = new Guid("58b484db-a2fe-4391-7fb0-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("7d6397d4-38be-440a-7fce-08d9721b6049"),
                            CategoryId = new Guid("9d9f9b5a-7ccb-4f17-7faa-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("7d6397d4-38be-440a-7fce-08d9721b6049"),
                            CategoryId = new Guid("9174f131-68cf-47d2-7faf-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("7d6397d4-38be-440a-7fce-08d9721b6049"),
                            CategoryId = new Guid("625db075-f113-4487-7fab-08d9721b6049")
                        },
                        new
                        {
                            PromocodeId = new Guid("7d6397d4-38be-440a-7fce-08d9721b6049"),
                            CategoryId = new Guid("31c65a6d-8cd6-40fd-7fac-08d9721b6049")
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TableNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("TableId")
                        .HasName("PK_Tables_TableId");

                    b.HasIndex(new[] { "TableNumber" }, "AK_Tables_TableNumber")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = new Guid("a3ac5a37-91be-4e10-7fb3-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 1
                        },
                        new
                        {
                            TableId = new Guid("4fd9a172-2fa6-40b9-7fb4-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 2
                        },
                        new
                        {
                            TableId = new Guid("b4bf53aa-80e2-44a1-7fb5-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 3
                        },
                        new
                        {
                            TableId = new Guid("1f5450ee-93a9-40c5-7fb6-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 4
                        },
                        new
                        {
                            TableId = new Guid("20ae8555-e9a5-4034-7fb7-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 5
                        },
                        new
                        {
                            TableId = new Guid("85c9102c-3149-45d0-7fb8-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 6
                        },
                        new
                        {
                            TableId = new Guid("01b3386b-c43b-4f23-7fb9-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 7
                        },
                        new
                        {
                            TableId = new Guid("f89367f0-26db-4b0c-7fba-08d9721b6049"),
                            NumberOfSeats = 16,
                            TableNumber = 8
                        },
                        new
                        {
                            TableId = new Guid("575e94ea-673d-44d0-7fbb-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 9
                        },
                        new
                        {
                            TableId = new Guid("fd89d4f5-6da1-47de-7fbc-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 10
                        },
                        new
                        {
                            TableId = new Guid("4eaadeb4-19cb-48b2-7fbd-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 11
                        },
                        new
                        {
                            TableId = new Guid("e56920c7-8bd9-4827-7fbe-08d9721b6049"),
                            NumberOfSeats = 5,
                            TableNumber = 12
                        },
                        new
                        {
                            TableId = new Guid("d175e60f-4a93-4b3a-7fbf-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 13
                        },
                        new
                        {
                            TableId = new Guid("b4015d97-0f55-42aa-7fc0-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 14
                        },
                        new
                        {
                            TableId = new Guid("4e7fba45-7597-4544-7fc1-08d9721b6049"),
                            NumberOfSeats = 2,
                            TableNumber = 15
                        },
                        new
                        {
                            TableId = new Guid("41cc2d80-f76c-472d-7fc2-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 16
                        },
                        new
                        {
                            TableId = new Guid("64e5e06b-528c-4b50-7fc3-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 17
                        },
                        new
                        {
                            TableId = new Guid("466c8310-2e42-423c-7fc4-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 18
                        },
                        new
                        {
                            TableId = new Guid("85af3eb6-b31f-43fd-7fc5-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 19
                        },
                        new
                        {
                            TableId = new Guid("d75b47dd-701c-477b-7fc6-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 20
                        },
                        new
                        {
                            TableId = new Guid("c6dac042-3ad0-4474-7fc7-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 21
                        },
                        new
                        {
                            TableId = new Guid("d1f7a12e-927d-41c9-7fc8-08d9721b6049"),
                            NumberOfSeats = 3,
                            TableNumber = 22
                        },
                        new
                        {
                            TableId = new Guid("0dc791b0-1e4b-4eba-7fc9-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 23
                        },
                        new
                        {
                            TableId = new Guid("46139d5f-46ae-4746-7fca-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 24
                        },
                        new
                        {
                            TableId = new Guid("61528303-1007-4b86-7fcb-08d9721b6049"),
                            NumberOfSeats = 4,
                            TableNumber = 25
                        },
                        new
                        {
                            TableId = new Guid("f03d376b-3020-47fd-7fcc-08d9721b6049"),
                            NumberOfSeats = 13,
                            TableNumber = 26
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInCart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("AppliedPromocodesInCarts")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_AppliedPromocodesInCarts_PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("AppliedPromocodesInCarts")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_AppliedPromocodesInCarts_OrdersIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInOrder", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("AppliedPromocodesInOrders")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_AppliedPromocodesInOrders_PromocodeId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Order", "Order")
                        .WithMany("AppliedPromocodesInOrders")
                        .HasForeignKey("OrderId", "ClientId")
                        .HasConstraintName("FK_AppliedPromocodesInOrders_OrdersIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.BookedTable", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("BookedTables")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_BookedTables_TableId")
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("Carts")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_Carts_TableId");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.CartsLinkedDish", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("CartsLinkedDishes")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_CartsLinkedDishes_DishId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("CartsLinkedDishes")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_CartsLinkedDishes_CartIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesByCategory", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.DishCategory", "Category")
                        .WithMany("DishesByCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_DishesByCategories_CategoryId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesByCategories")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesByCategories_DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInCart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesInCarts")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesInCarts_DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("DishesInCarts")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_DishesInCarts_CartIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInOrder", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesInOrders")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesInOrders_DishId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Order", "Order")
                        .WithMany("DishesInOrders")
                        .HasForeignKey("OrderId", "ClientId")
                        .HasConstraintName("FK_DishesInOrders_OrderIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_Orders_TableId")
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.PromocodesForDishCategory", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.DishCategory", "Category")
                        .WithMany("PromocodesForDishCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PromocodesForDishCategories_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("PromocodesForDishCategories")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_PromocodesForDishCategories_PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.Navigation("AppliedPromocodesInCarts");

                    b.Navigation("CartsLinkedDishes");

                    b.Navigation("DishesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Dish", b =>
                {
                    b.Navigation("CartsLinkedDishes");

                    b.Navigation("DishesByCategories");

                    b.Navigation("DishesInCarts");

                    b.Navigation("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishCategory", b =>
                {
                    b.Navigation("DishesByCategories");

                    b.Navigation("PromocodesForDishCategories");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.Navigation("AppliedPromocodesInOrders");

                    b.Navigation("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Promocode", b =>
                {
                    b.Navigation("AppliedPromocodesInCarts");

                    b.Navigation("AppliedPromocodesInOrders");

                    b.Navigation("PromocodesForDishCategories");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Table", b =>
                {
                    b.Navigation("BookedTables");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
