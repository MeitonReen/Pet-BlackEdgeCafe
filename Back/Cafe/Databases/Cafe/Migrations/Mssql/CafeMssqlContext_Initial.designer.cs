// <auto-generated />
using System;
using Cafe.Databases.Cafe.Context.Implementations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cafe.Databases.Cafe.Migrations.Mssql
{
    [DbContext(typeof(CafeMssqlContext))]
    [Migration("20210907161616_CafeMssqlContext_Initial")]
    partial class CafeMssqlContext_Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInCart", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromocodeId", "CartId")
                        .HasName("PK_AppliedPromocodesInCarts_PromocodeIdCartId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("AppliedPromocodesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInOrder", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromocodeId", "OrderId")
                        .HasName("PK_AppliedPromocodesInOrders_PromocodeIdOrderId");

                    b.HasIndex("OrderId", "ClientId");

                    b.ToTable("AppliedPromocodesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.BookedTable", b =>
                {
                    b.Property<Guid>("BookedTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeATableIsWillBeFree")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookedTableId")
                        .HasName("PK_BookedTables_BookedTableId");

                    b.HasIndex("TableId");

                    b.ToTable("BookedTables");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<float?>("AmountIncludingValidAppliedPromocodes")
                        .HasColumnType("real")
                        .HasColumnName("AmountIncluding_Valid_Applied_Promocodes");

                    b.Property<string>("CookingStatus")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SqliteVersion")
                        .HasColumnType("int");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId", "ClientId")
                        .HasName("PK_Carts_CartIdClientId");

                    b.HasIndex("TableId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.CartsLinkedDish", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("CostIncludingValidAppliedPromocodes")
                        .HasColumnType("real")
                        .HasColumnName("CostIncluding_Valid_Applied_Promocodes");

                    b.HasKey("ClientId", "CartId", "DishId")
                        .HasName("PK_CartsLinkedDishes_CartIdClientIdDishId");

                    b.HasIndex("DishId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("CartsLinkedDishes");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Dish", b =>
                {
                    b.Property<Guid>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("Calorie")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("DishId")
                        .HasName("PK_Dishes_DishId");

                    b.HasIndex(new[] { "Name" }, "AK_Dishes_Name")
                        .IsUnique();

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("3985e3b4-1660-48f0-8208-08d9721ad135"),
                            Calorie = 500,
                            Cost = 255,
                            Description = "Мясная тарелка – это калейдоскоп деликатесов, изящно дополненный овощами и соусом от шеф-повара. Каждая тарелка грамотно создаётся нашим шеф-поваром в рамках вкусовой палитры. Мясная тарелка станет прекрасным дополнением к крепкому алкоголю – коньяку, бренди или виски, а также сухому красному вину",
                            Name = "Мясная тарелка",
                            Weight = 240
                        },
                        new
                        {
                            DishId = new Guid("ff4f4b78-ba2a-414d-8209-08d9721ad135"),
                            Calorie = 500,
                            Cost = 880,
                            Description = "Греческий салат – легкое, вкусное и исключительно полезное блюдо. Сочный помидор, хрустящий огурец, нарезанный красный лук, сладкий перец, рассыпчатый сыр «Фета», пухлые маслины и оливковое масло",
                            Name = "Греческий салат",
                            Weight = 280
                        },
                        new
                        {
                            DishId = new Guid("232f2163-329a-4743-820a-08d9721ad135"),
                            Calorie = 600,
                            Cost = 500,
                            Description = "Благодаря маринаду на базе 9 специй стейк получается очень пикантный, мягкий и сочный. Подаётся с соусом от шеф-повара и овощами",
                            Name = "Свиной стейк",
                            Weight = 350
                        },
                        new
                        {
                            DishId = new Guid("2a5704e9-7dbd-4ead-820b-08d9721ad135"),
                            Calorie = 500,
                            Cost = 500,
                            Description = "Благодаря маринаду на базе 9 специй стейк получается очень пикантный, мягкий и сочный. Подаётся с соусом от шеф-повара и овощами",
                            Name = "Говяжий стейк",
                            Weight = 350
                        },
                        new
                        {
                            DishId = new Guid("b7908776-c71e-40a4-820c-08d9721ad135"),
                            Calorie = 500,
                            Cost = 400,
                            Description = "Многокомпонентный красный суп с наваристым вкусом. Мы готовим борщ на мясе телятины и говядины чтобы избежать большого содержания в блюде холестерина, по мере готовности добавляем свёклу, томат, картофель, лук, морковь. В качестве дополнительных ингредиентов мы добавляем сладкий перец и грибы",
                            Name = "Борщец",
                            Weight = 400
                        },
                        new
                        {
                            DishId = new Guid("4b5f8ebf-32e7-4686-820d-08d9721ad135"),
                            Calorie = 450,
                            Cost = 350,
                            Description = "Тартар из лосося это блюдо французской кухни. Основой рецепта является тартар из говядины, но вместо мяса используется лосось. Свежий или малосольный лосось маринуется вместе с луком и специями, и подается порционно на тарелке вместе с авокадо и гренками",
                            Name = "Тартар из лосося",
                            Weight = 250
                        },
                        new
                        {
                            DishId = new Guid("b71267c0-1b38-4b6b-820e-08d9721ad135"),
                            Calorie = 480,
                            Cost = 350,
                            Description = "Салат Цезарь — одно из самых популярных и востребованных блюд, на протяжении более чем сотни лет это бессменная классика европейской кухни. За долгие годы этот салат набрал десятки интересных вариаций состава и подачи, в нашем кафе его подают с креветками",
                            Name = "Цезарь с креветками",
                            Weight = 300
                        },
                        new
                        {
                            DishId = new Guid("f4a3f561-f09c-45b9-820f-08d9721ad135"),
                            Calorie = 320,
                            Cost = 350,
                            Description = "Лимонный сок – 5 мл, сахарный сироп – 5 мл, ликер мараскино – 15 мл, ликер трипл сек – 15 мл, коньяк – 50 мл, ангостуру биттер – 1 дэш, апельсиновый биттер – 1 дэш, лимонная цедра, сахарная окаемка",
                            Name = "Бренди круста",
                            Weight = 300
                        },
                        new
                        {
                            DishId = new Guid("7f1240eb-051c-41db-8210-08d9721ad135"),
                            Calorie = 480,
                            Cost = 345,
                            Description = "Водка – 120 мл, грейпфрутовый сок – 220 мл, гренадин – 15 мл",
                            Name = "Алёша",
                            Weight = 320
                        },
                        new
                        {
                            DishId = new Guid("11de4db6-eb3e-441c-8211-08d9721ad135"),
                            Calorie = 440,
                            Cost = 370,
                            Description = "Белый ром – 50 мл, клубничный сироп – 15 мл, содовая – 100 мл, лайм – 60 г, клубника – 120 г, мята – 3 г",
                            Name = "Клубничный мохито",
                            Weight = 370
                        },
                        new
                        {
                            DishId = new Guid("f2ad8ad7-b371-4ba5-8212-08d9721ad135"),
                            Calorie = 400,
                            Cost = 340,
                            Description = "Белый ром – 30 мл, Блю Кюросао – 20 мл, кокосовое молоко – 50 мл, водка – 30 мл, огурец, ломтики персика",
                            Name = "Скай мохито",
                            Weight = 330
                        },
                        new
                        {
                            DishId = new Guid("2272d130-fe97-406d-8213-08d9721ad135"),
                            Calorie = 400,
                            Cost = 340,
                            Description = "Кофейный ликёр – 1 часть, айриш крем – 1 часть, светлый ром – 1 часть",
                            Name = "Б-51",
                            Weight = 120
                        },
                        new
                        {
                            DishId = new Guid("6e034835-6045-4260-8214-08d9721ad135"),
                            Calorie = 200,
                            Cost = 120,
                            Description = "Водка — 25 мл, гренадин – 25 мл, красный острый соус \"Табаско\" – 5 мл",
                            Name = "Боярский",
                            Weight = 55
                        },
                        new
                        {
                            DishId = new Guid("c374956e-1554-446b-8215-08d9721ad135"),
                            Calorie = 270,
                            Cost = 250,
                            Description = "Ликер мятный зеленый – 15 мл, ликер сливочный Бейлис – 15 мл, бренди – 15 мл",
                            Name = "Ирландский флаг",
                            Weight = 45
                        },
                        new
                        {
                            DishId = new Guid("e913e845-29c8-42f2-8216-08d9721ad135"),
                            Calorie = 280,
                            Cost = 270,
                            Description = "Водка – 45 мл, томатный сок – 90 мл, лимонный сок – 15 мл, вустерский соус – 2-3 капли, табаско – щепотка – 2-3 капли, смесь соли c порошком сельдерея – 1 щепотка, чёрный перец – 1 щепотка",
                            Name = "Кровавая мэри",
                            Weight = 155
                        },
                        new
                        {
                            DishId = new Guid("b30eacc1-e3e7-4bb1-8217-08d9721ad135"),
                            Calorie = 190,
                            Cost = 220,
                            Description = "Яблочный ликёр – 20 мл, лимонный сок – 15 мл, шотландский виски – 20 мл",
                            Name = "Яблочный сауэр",
                            Weight = 55
                        },
                        new
                        {
                            DishId = new Guid("d4c3ddae-4cd0-4faa-8218-08d9721ad135"),
                            Calorie = 260,
                            Cost = 290,
                            Description = "Ром — 30 мл, водка — 30 мл, трипл сек — 15 мл, ананасовый сок — 30 мл, фреш лайма — 20 мл, сахарный сироп — 15 мл, долька ананаса",
                            Name = "Джангл Джус",
                            Weight = 140
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CategoryId")
                        .HasName("PK_DishCategories_CategoryId");

                    b.HasIndex(new[] { "Name" }, "AK_DishCategories_Name")
                        .IsUnique();

                    b.ToTable("DishCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("67fbf14a-0de6-4a74-8219-08d9721ad135"),
                            Name = "Салаты"
                        },
                        new
                        {
                            CategoryId = new Guid("263e1f01-d822-4450-821a-08d9721ad135"),
                            Name = "Супы"
                        },
                        new
                        {
                            CategoryId = new Guid("a6219eed-b0c4-44ef-821b-08d9721ad135"),
                            Name = "Жаркое"
                        },
                        new
                        {
                            CategoryId = new Guid("6a5f67c4-ff19-4f3f-821c-08d9721ad135"),
                            Name = "Рыба"
                        },
                        new
                        {
                            CategoryId = new Guid("2808bfcc-54f9-43ce-821d-08d9721ad135"),
                            Name = "Закуски"
                        },
                        new
                        {
                            CategoryId = new Guid("eb4fb1ba-8d9d-4aa0-821e-08d9721ad135"),
                            Name = "Лонги"
                        },
                        new
                        {
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135"),
                            Name = "Шоты"
                        },
                        new
                        {
                            CategoryId = new Guid("f484ee66-1a98-472b-8220-08d9721ad135"),
                            Name = "Безалкогольные"
                        },
                        new
                        {
                            CategoryId = new Guid("4fcfa7a1-9b81-4db1-8221-08d9721ad135"),
                            Name = "Основное меню"
                        },
                        new
                        {
                            CategoryId = new Guid("2025a052-324e-4a40-8222-08d9721ad135"),
                            Name = "Напитки"
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesByCategory", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishId", "CategoryId")
                        .HasName("PK_DishesByCaregories_DishIdCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("DishesByCategories");

                    b.HasData(
                        new
                        {
                            DishId = new Guid("3985e3b4-1660-48f0-8208-08d9721ad135"),
                            CategoryId = new Guid("2808bfcc-54f9-43ce-821d-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("ff4f4b78-ba2a-414d-8209-08d9721ad135"),
                            CategoryId = new Guid("67fbf14a-0de6-4a74-8219-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("232f2163-329a-4743-820a-08d9721ad135"),
                            CategoryId = new Guid("a6219eed-b0c4-44ef-821b-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("2a5704e9-7dbd-4ead-820b-08d9721ad135"),
                            CategoryId = new Guid("a6219eed-b0c4-44ef-821b-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("b7908776-c71e-40a4-820c-08d9721ad135"),
                            CategoryId = new Guid("263e1f01-d822-4450-821a-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("4b5f8ebf-32e7-4686-820d-08d9721ad135"),
                            CategoryId = new Guid("2808bfcc-54f9-43ce-821d-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("b71267c0-1b38-4b6b-820e-08d9721ad135"),
                            CategoryId = new Guid("67fbf14a-0de6-4a74-8219-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("f4a3f561-f09c-45b9-820f-08d9721ad135"),
                            CategoryId = new Guid("eb4fb1ba-8d9d-4aa0-821e-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("7f1240eb-051c-41db-8210-08d9721ad135"),
                            CategoryId = new Guid("eb4fb1ba-8d9d-4aa0-821e-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("f2ad8ad7-b371-4ba5-8212-08d9721ad135"),
                            CategoryId = new Guid("eb4fb1ba-8d9d-4aa0-821e-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("2272d130-fe97-406d-8213-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("6e034835-6045-4260-8214-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("c374956e-1554-446b-8215-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("e913e845-29c8-42f2-8216-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("b30eacc1-e3e7-4bb1-8217-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            DishId = new Guid("d4c3ddae-4cd0-4faa-8218-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInCart", b =>
                {
                    b.Property<Guid>("DishesInCartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("CostIncludingValidAppliedPromocodes")
                        .HasColumnType("real")
                        .HasColumnName("CostIncluding_Valid_Applied_Promocodes");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishesInCartsId")
                        .HasName("PK_DishesInCarts_DishesInCartsId");

                    b.HasIndex("DishId");

                    b.HasIndex("CartId", "ClientId");

                    b.ToTable("DishesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInOrder", b =>
                {
                    b.Property<Guid>("DishesInOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("CostIncludingAppliedPromocodes")
                        .HasColumnType("real")
                        .HasColumnName("CostIncluding_Applied_Promocodes");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishesInOrderId")
                        .HasName("PK_DishesInOrders_DishesInOrderId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId", "ClientId");

                    b.ToTable("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<float?>("AmountIncludingAppliedPromocodes")
                        .HasColumnType("real")
                        .HasColumnName("AmountIncluding_Applied_Promocodes");

                    b.Property<string>("CookingStatus")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DateTimeIsCompleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ClientId")
                        .HasName("PK_Orders_OrderIdClientId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Promocode", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<float>("CoefficientDiscount")
                        .HasColumnType("real");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PromocodeText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PromocodeId")
                        .HasName("PK_Promocodes_PromocodeId");

                    b.HasIndex(new[] { "PromocodeText" }, "AK_Promocodes_PromocodeText")
                        .IsUnique();

                    b.ToTable("Promocodes");

                    b.HasData(
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CoefficientDiscount = 0.1f,
                            IsValid = false,
                            PromocodeText = "BlackEdge_SpringPromotion_10%"
                        },
                        new
                        {
                            PromocodeId = new Guid("27be7614-bf30-4c78-823e-08d9721ad135"),
                            CoefficientDiscount = 0.07f,
                            IsValid = false,
                            PromocodeText = "HAPPY_WINTER_7%"
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.PromocodesForDishCategory", b =>
                {
                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromocodeId", "CategoryId")
                        .HasName("PK_PromocodesForDishCategories_PromocodeIdDishCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PromocodesForDishCategories");

                    b.HasData(
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("67fbf14a-0de6-4a74-8219-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("eb4fb1ba-8d9d-4aa0-821e-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("263e1f01-d822-4450-821a-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("a6219eed-b0c4-44ef-821b-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("6a5f67c4-ff19-4f3f-821c-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("2808bfcc-54f9-43ce-821d-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("61b99a81-fb12-4122-823d-08d9721ad135"),
                            CategoryId = new Guid("f484ee66-1a98-472b-8220-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("27be7614-bf30-4c78-823e-08d9721ad135"),
                            CategoryId = new Guid("263e1f01-d822-4450-821a-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("27be7614-bf30-4c78-823e-08d9721ad135"),
                            CategoryId = new Guid("7c3a2067-91d5-4d8a-821f-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("27be7614-bf30-4c78-823e-08d9721ad135"),
                            CategoryId = new Guid("a6219eed-b0c4-44ef-821b-08d9721ad135")
                        },
                        new
                        {
                            PromocodeId = new Guid("27be7614-bf30-4c78-823e-08d9721ad135"),
                            CategoryId = new Guid("6a5f67c4-ff19-4f3f-821c-08d9721ad135")
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("TableId")
                        .HasName("PK_Tables_TableId");

                    b.HasIndex(new[] { "TableNumber" }, "AK_Tables_TableNumber")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = new Guid("14985e5a-0b5e-46a3-8223-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 1
                        },
                        new
                        {
                            TableId = new Guid("805c244c-a440-489d-8224-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 2
                        },
                        new
                        {
                            TableId = new Guid("f1e4567c-7062-4516-8225-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 3
                        },
                        new
                        {
                            TableId = new Guid("866b43ea-c3a5-4c6c-8226-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 4
                        },
                        new
                        {
                            TableId = new Guid("5b4bbb2f-5be0-43ec-8227-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 5
                        },
                        new
                        {
                            TableId = new Guid("a4672bf4-4061-4425-8228-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 6
                        },
                        new
                        {
                            TableId = new Guid("d90df328-723e-4bf8-8229-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 7
                        },
                        new
                        {
                            TableId = new Guid("e9215366-bd19-4b7d-822a-08d9721ad135"),
                            NumberOfSeats = 16,
                            TableNumber = 8
                        },
                        new
                        {
                            TableId = new Guid("42f50cac-50c6-4dee-822b-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 9
                        },
                        new
                        {
                            TableId = new Guid("c7ddbcdf-c204-415a-822c-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 10
                        },
                        new
                        {
                            TableId = new Guid("d07865a6-14da-4bf3-822d-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 11
                        },
                        new
                        {
                            TableId = new Guid("aadb451a-56ee-4d9c-822e-08d9721ad135"),
                            NumberOfSeats = 5,
                            TableNumber = 12
                        },
                        new
                        {
                            TableId = new Guid("7608dd10-cf1b-4f86-822f-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 13
                        },
                        new
                        {
                            TableId = new Guid("0cf5b190-7f15-4e52-8230-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 14
                        },
                        new
                        {
                            TableId = new Guid("4f944c08-9f27-4674-8231-08d9721ad135"),
                            NumberOfSeats = 2,
                            TableNumber = 15
                        },
                        new
                        {
                            TableId = new Guid("0ac6178c-3c25-4dc6-8232-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 16
                        },
                        new
                        {
                            TableId = new Guid("3bc875d2-b99f-4b68-8233-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 17
                        },
                        new
                        {
                            TableId = new Guid("bb50e01b-19ee-461c-8234-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 18
                        },
                        new
                        {
                            TableId = new Guid("f73fecea-5bb9-4171-8235-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 19
                        },
                        new
                        {
                            TableId = new Guid("d8aaa1f1-a062-44e9-8236-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 20
                        },
                        new
                        {
                            TableId = new Guid("9392548a-1a16-416e-8237-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 21
                        },
                        new
                        {
                            TableId = new Guid("1e0fe4d8-cbca-4eed-8238-08d9721ad135"),
                            NumberOfSeats = 3,
                            TableNumber = 22
                        },
                        new
                        {
                            TableId = new Guid("96e19809-d508-4559-8239-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 23
                        },
                        new
                        {
                            TableId = new Guid("67e7b8d2-9078-4774-823a-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 24
                        },
                        new
                        {
                            TableId = new Guid("9537a555-11f9-470a-823b-08d9721ad135"),
                            NumberOfSeats = 4,
                            TableNumber = 25
                        },
                        new
                        {
                            TableId = new Guid("ea13a612-0af3-4fee-823c-08d9721ad135"),
                            NumberOfSeats = 13,
                            TableNumber = 26
                        });
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInCart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("AppliedPromocodesInCarts")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_AppliedPromocodesInCarts_PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("AppliedPromocodesInCarts")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_AppliedPromocodesInCarts_OrdersIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.AppliedPromocodesInOrder", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("AppliedPromocodesInOrders")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_AppliedPromocodesInOrders_PromocodeId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Order", "Order")
                        .WithMany("AppliedPromocodesInOrders")
                        .HasForeignKey("OrderId", "ClientId")
                        .HasConstraintName("FK_AppliedPromocodesInOrders_OrdersIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.BookedTable", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("BookedTables")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_BookedTables_TableId")
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("Carts")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_Carts_TableId");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.CartsLinkedDish", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("CartsLinkedDishes")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_CartsLinkedDishes_DishId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("CartsLinkedDishes")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_CartsLinkedDishes_CartIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesByCategory", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.DishCategory", "Category")
                        .WithMany("DishesByCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_DishesByCategories_CategoryId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesByCategories")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesByCategories_DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInCart", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesInCarts")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesInCarts_DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Cart", "C")
                        .WithMany("DishesInCarts")
                        .HasForeignKey("CartId", "ClientId")
                        .HasConstraintName("FK_DishesInCarts_CartIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("C");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishesInOrder", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Dish", "Dish")
                        .WithMany("DishesInOrders")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK_DishesInOrders_DishId")
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Order", "Order")
                        .WithMany("DishesInOrders")
                        .HasForeignKey("OrderId", "ClientId")
                        .HasConstraintName("FK_DishesInOrders_OrderIdClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_Orders_TableId")
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.PromocodesForDishCategory", b =>
                {
                    b.HasOne("Cafe.Databases.CafeDatabase.DishCategory", "Category")
                        .WithMany("PromocodesForDishCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PromocodesForDishCategories_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cafe.Databases.CafeDatabase.Promocode", "Promocode")
                        .WithMany("PromocodesForDishCategories")
                        .HasForeignKey("PromocodeId")
                        .HasConstraintName("FK_PromocodesForDishCategories_PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Cart", b =>
                {
                    b.Navigation("AppliedPromocodesInCarts");

                    b.Navigation("CartsLinkedDishes");

                    b.Navigation("DishesInCarts");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Dish", b =>
                {
                    b.Navigation("CartsLinkedDishes");

                    b.Navigation("DishesByCategories");

                    b.Navigation("DishesInCarts");

                    b.Navigation("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.DishCategory", b =>
                {
                    b.Navigation("DishesByCategories");

                    b.Navigation("PromocodesForDishCategories");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Order", b =>
                {
                    b.Navigation("AppliedPromocodesInOrders");

                    b.Navigation("DishesInOrders");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Promocode", b =>
                {
                    b.Navigation("AppliedPromocodesInCarts");

                    b.Navigation("AppliedPromocodesInOrders");

                    b.Navigation("PromocodesForDishCategories");
                });

            modelBuilder.Entity("Cafe.Databases.CafeDatabase.Table", b =>
                {
                    b.Navigation("BookedTables");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
